# Maintainer:  Tim Stahlhut <stahta01@gmail.com>
# Contributor: Alexey Pavlov <alexpux@gmail.com>
# Contributor: Alexey Borzenkov <snaury@gmail.com>
# Contributor: Ray Donnelly <mingw.android@gmail.com>
# Contributor: Renato Silva <br.renatosilva@gmail.com>
# Contributor: wirx6 <wirx654@gmail.com>
# Contributor: Kirill MÃ¼ller <krlmlr@mailbox.org>

# Package libgccjit seems to require enable-shared to build.
# When, static only build libgfortran and gcc-libs do not make sense to build.

_enable_ada=no
_enable_fortran=no
_enable_objc=no

_enable_3_stages=no
_enable_threads=no
_enable_graphite=yes
_enable_system_mpc_mpfr_gmp_libs=no
_enable_system_isl_lib=no
_enable_multilib=no

if [[ "$MSYSTEM" != "MINGW64" ]]; then
  _enable_multilib=no
fi

#if [[ "$MSYSTEM" == "UCRT64" ]]; then
#  # As of 2021-10-11 ucrt64 requires 3 stages to build without error
#  _enable_3_stages=yes
#fi

if [[ "$_enable_3_stages" == "yes" && "$_enable_system_isl_lib" == "no" ]]; then
  # in-tree build of ISL fails when using _enable_3_stages is yes
  # When using GCC version 10.3 and ISL version 0.22
  _enable_system_isl_lib=yes
fi

_realname=gcc
_majorver=9
_pkgname_prefix=${_realname}${_majorver}
_pkgname_suffix="-static"
pkgbase=mingw-w64-${_pkgname_prefix}${_pkgname_suffix}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_pkgname_prefix}${_pkgname_suffix}"
         $([[ "$_enable_fortran" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-${_pkgname_prefix}-fortran${_pkgname_suffix}")
         $([[ "$_enable_ada" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-${_pkgname_prefix}-ada${_pkgname_suffix}")
         $([[ "$_enable_objc" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-${_pkgname_prefix}-objc${_pkgname_suffix}")
        )
pkgver=${_majorver}.3.0
_sourcedir=${_realname}-${pkgver}
pkgrel=1
pkgdesc="GCC for the MinGW-w64"
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64')
url="https://gcc.gnu.org"
license=('GPL' 'LGPL' 'FDL' 'custom')
groups=("${MINGW_PACKAGE_PREFIX}-toolchain")
makedepends=("${MINGW_PACKAGE_PREFIX}-${_realname}"
             "${MINGW_PACKAGE_PREFIX}-binutils"
             "${MINGW_PACKAGE_PREFIX}-headers"
             $([[ "$_enable_ada" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-${_realname}-ada")
             $([[ "$_enable_multilib" == "no" || "$MSYSTEM" != "MINGW64" ]] && echo "${MINGW_PACKAGE_PREFIX}-crt")
             $([[ "$_enable_multilib" == "yes" && "$MSYSTEM" == "MINGW64" ]] && echo "${MINGW_PACKAGE_PREFIX}-crt-multilib")
             $([[ "$_enable_system_isl_lib" == "yes" && "$_enable_graphite" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-isl")
             $([[ "$_enable_system_mpc_mpfr_gmp_libs" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-gmp")
             $([[ "$_enable_system_mpc_mpfr_gmp_libs" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-mpc")
             $([[ "$_enable_system_mpc_mpfr_gmp_libs" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-mpfr")
             $([[ "$_enable_multilib" == "no" || "$MSYSTEM" != "MINGW64" ]] && echo "${MINGW_PACKAGE_PREFIX}-windows-default-manifest")
             $([[ "$_enable_multilib" == "yes" && "$MSYSTEM" == "MINGW64" ]] && echo "${MINGW_PACKAGE_PREFIX}-windows-default-manifest-multilib")
#             $([[ "$_enable_threads" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-winpthreads")
             "${MINGW_PACKAGE_PREFIX}-libiconv"
             "${MINGW_PACKAGE_PREFIX}-zlib"
             "${MINGW_PACKAGE_PREFIX}-zstd")
#checkdepends=('dejagnu')
optdepends=()
options=('staticlibs' '!emptydirs') # '!strip' 'debug')
MPFR_VERSION=4.0.2
GMP_VERSION=6.1.2
MPC_VERSION=1.1.0
ISL_VERSION=0.22
source=("https://ftp.gnu.org/gnu/gcc/${_realname}-${pkgver%%+*}/${_realname}-${pkgver}.tar.xz"
        "gdbinit"
        002-Relocate-libintl.patch
        003-Windows-Follow-Posix-dir-exists-semantics-more-close.patch
        004-Windows-Use-not-in-progpath-and-leave-case-as-is.patch
        005-Windows-Don-t-ignore-native-system-header-dir.patch
        006-Windows-New-feature-to-allow-overriding.patch
        007-Build-EXTRA_GNATTOOLS-for-Ada.patch
        008-Prettify-linking-no-undefined.patch
        009-gcc-make-xmmintrin-header-cplusplus-compatible-depre.patch
        010-Fix-using-large-PCH.patch
        011-Enable-shared-gnat-implib.patch
        012-Handle-spaces-in-path-for-default-manifest.patch
        014-gcc-9-branch-clone_function_name_1-Retain-any-stdcall-suffix.patch
        016-Ensure-lmsvcrt-precede-lkernel32.patch
        020-libgomp-Don-t-hard-code-MS-printf-attributes.patch
        023-gcc-8-ALL_ADAFLAGS-filter-out-Wno-pedantic-ms-format.patch
        130-libstdc++-in-out.patch
        140-gcc-8.2.0-diagnostic-color.patch
        150-gcc-10.2.0-libgcc-ldflags.patch
        160-libbacktrace-seh.patch
        200-ms_printf-improvements.patch
        203-backport-longjmp-fix.patch
        204-Change-EH-pointer-encodings-to-PC-relative-on-Window.patch
        205-x86-Add-include-gard-to-cpuid.h.patch)
if [[ "$_enable_system_mpc_mpfr_gmp_libs" == "no" ]]; then
source+=("https://ftp.gnu.org/gnu/mpfr/mpfr-$MPFR_VERSION.tar.xz"
         "https://ftp.gnu.org/gnu/gmp/gmp-$GMP_VERSION.tar.xz"
         "https://ftp.gnu.org/gnu/mpc/mpc-$MPC_VERSION.tar.gz")
fi
if [[ "$_enable_system_isl_lib" == "no" ]] && [[ "$_enable_graphite" == "yes" ]]; then
  source+=("http://isl.gforge.inria.fr/isl-$ISL_VERSION.tar.bz2")
fi
noextract=("${_realname}-${pkgver}.tar.xz"
           "mpfr-$MPFR_VERSION.tar.xz"
           "gmp-$GMP_VERSION.tar.xz"
           "mpc-$MPC_VERSION.tar.gz"
           "isl-$ISL_VERSION.tar.bz2")
sha256sums=('71e197867611f6054aa1119b13a0c0abac12834765fe2d81f35ac57f84f742d1'
            'bce81824fc89e5e62cca350de4c17a27e27a18a1a1ad5ca3492aec1fc5af3234'
            '07e554616fd9c9cf0ac5a5aba00d70fc647ba786a848e4075f82872f10fed7f4'
            'fab27979225963221b5886992749cb3b61d09cb0cc0ddfa2187a28f53a582c41'
            '3eb4ea9f67b8d1cb9c13c00a348c50a0469b6d25292fe67b4eaadd657cdf3784'
            '6e407a782d3fb636d800a4278fbe1da876732ea17cba6aa82c261b6ec6ec2073'
            'd1e10cd2ef5594c34acead334bb93af500e00699ba673edc8916da22a572677d'
            '3629446c0039d9061cfedcb6d7a7589279588bb4601c7ce233546d357bd4be34'
            '2e4f7d0ef739aec8986eb06a2baadee552ebc2e8be661c39a448e93515179eb5'
            '513a824ee500d063f09ec920a9ad317a3a117e5468bf201aaf3f70dd0000e769'
            'ec58aafba0174313451c282339bbd67ed0b11bca034c29023e0138b61441cf71'
            '8faff8e503a617f283270f411399a8bcacda3ab62b4072dedf117e108af4844a'
            '11dd5388a1e1c0a2bc8bc3824726598784b9b9e0896a3d77950ba6a4569f1128'
            '2321c7dce29a600477e481d16d847f05dc8c6d6461ee1eba7814c5bf62c2ef95'
            'f96348a858722d6de87445e264a7b021f684b5fb11fcd8f7fbfbc9a8fb2d45e1'
            '276ecc392c777d4b17d771a987e80dca50ff25d8f65671d5de139be73997064b'
            'a526cfab91a1499be92c824c7f2185a013a38dbdfbeabe63ecbe84451e07b021'
            '5240a9e731b45c17a164066c7eb193c1fbee9fd8d9a2a5afa2edbcde9510da47'
            '7f0b4e45d933e18c9d8bd2afcd83e4f52e97e2e25dd41bfa0cba755c70e591c7'
            '88c1d65e763e631ad49f9a077ed631f4acac9ef4732e2818ccddaefc883b1811'
            '146ac7aec004a949e42f7da6ff66351790e56094a85f6dbe28ea583b47c8125d'
            'a1ca2f5dd55823e29f6628dd5027057636cf3d5998c438f365a84f7ec4b7eaa6'
            '56d748847f4982e9b9681f37016a06c260b193a174c89eda86a0a909b4a964bf'
            'c23545205b9d2492ed54990b611ff4e4e28a0b90d311c8fabfea609731485801')
if [[ "$_enable_system_mpc_mpfr_gmp_libs" == "no" ]]; then
  sha256sums+=(
            '1d3be708604eae0e42d578ba93b390c2a145f17743a744d8f3f8c2ad5855a38a'
            '87b565e89a9a684fe4ebeeddb8399dce2599f9c9049854ca8c0dfbdea0e21912'
            '6985c538143c1208dcb1ac42cedad6ff52e267b47e5f970183a3e75125b43c2e'
  )
fi
if [[ "$_enable_system_isl_lib" == "no" ]] && [[ "$_enable_graphite" == "yes" ]]; then
  sha256sums+=('b21d354acd613a91cb88328753ec3aaeb174d6af042d89c5fcf3bbcced370751') # ISL version 0.22
fi
validpgpkeys=(F3691687D867B81B51CE07D9BBE43771487328A9  # bpiotrowski@archlinux.org
              86CFFCA918CF3AF47147588051E8B148A9999C34  # evangelos@foutrelis.com
              13975A70E63C361C73AE69EF6EEB81F8981C74C7  # richard.guenther@gmail.com
              33C235A34C46AA3FFB293709A328C3A2C3C45C06) # Jakub Jelinek <jakub@redhat.com>

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    if patch --dry-run -Nbp1 -i "${srcdir}/${_patch}" > /dev/null 2>&1 ; then
      msg2 "Applying ${_patch}"
      patch -Nbp1 -i "${srcdir}/${_patch}"
    elif patch --dry-run -Rbp1 -i "${srcdir}/${_patch}" > /dev/null 2>&1 ; then
      msg2 "Skipping ${_patch} because it likely was already applied"
    else
      msg2 "Skipping ${_patch} because it likely will fail"
    fi
  done
}

del_file_exists() {
  for _fname in "$@"
  do
    if [ -f ${_fname} ]; then
      rm -rf ${_fname}
    fi
  done
}

extract_gcc() {
    if [ ! -d  "$_sourcedir" ]; then
        echo "Extracting $_sourcedir.tar.xz into $_sourcedir"
        mkdir -p "$_sourcedir"
        tar --directory=$_sourcedir --strip-components=1 -xf "$_sourcedir.tar.xz"
    fi
}

extract_to_gcc_folder() {
    local tarfile="$1"
    local subfolder="$(echo "$tarfile" | sed 's/-.*$//')"
    if [ ! -d  "$_sourcedir/$subfolder" ]; then
        echo "Extracting ${tarfile} to $_sourcedir/$subfolder"
        mkdir -p "$_sourcedir/$subfolder"
        tar -x --strip-components=1 -f "$tarfile" -C "$_sourcedir/$subfolder"
    else
        echo "Folder $_sourcedir/$subfolder already exists"
    fi
}
# =========================================== #

prepare() {
#  if [[ "$_enable_graphite" == "yes" ]]; then
#    echo "_enable_graphite equals yes"
#  else
#    echo "_enable_graphite does not equals yes"
#  fi
#
#  if [[ "$_enable_system_isl_lib" == "no" ]]; then
#    echo "_enable_system_isl_lib equals no"
#  else
#    echo "_enable_system_isl_lib does not equals no"
#    echo "_enable_system_isl_lib is [$_enable_system_isl_lib]"
#  fi
#
#  if [[ "$_enable_system_isl_lib" == "no" ]] && [[ "$_enable_graphite" == "yes" ]]; then
#    echo "_enable_system_isl_lib is no and _enable_graphite is yes"
#  fi

  cd ${srcdir}
  extract_gcc

  if [[ "$_enable_system_mpc_mpfr_gmp_libs" == "no" ]]; then
    extract_to_gcc_folder       mpfr-$MPFR_VERSION.tar.xz
    extract_to_gcc_folder       gmp-$GMP_VERSION.tar.xz
    extract_to_gcc_folder       mpc-$MPC_VERSION.tar.gz
  else
    rm -fr ${srcdir}/${_sourcedir}/mpfr
    rm -fr ${srcdir}/${_sourcedir}/gmp
    rm -fr ${srcdir}/${_sourcedir}/mpc
  fi

  if [[ "$_enable_system_isl_lib" == "no" ]] && [[ "$_enable_graphite" == "yes" ]]; then
    extract_to_gcc_folder       isl-$ISL_VERSION.tar.bz2
  else
    rm -fr ${srcdir}/${_sourcedir}/isl
  fi

  cd ${srcdir}/${_sourcedir}
#  del_file_exists intl/canonicalize.c intl/canonicalize.h \
#    intl/relocatex.c intl/relocatex.h

  apply_patch_with_msg \
    002-Relocate-libintl.patch \
    003-Windows-Follow-Posix-dir-exists-semantics-more-close.patch \
    004-Windows-Use-not-in-progpath-and-leave-case-as-is.patch \
    006-Windows-New-feature-to-allow-overriding.patch \
    007-Build-EXTRA_GNATTOOLS-for-Ada.patch \
    008-Prettify-linking-no-undefined.patch \
    009-gcc-make-xmmintrin-header-cplusplus-compatible-depre.patch \
    011-Enable-shared-gnat-implib.patch \
    012-Handle-spaces-in-path-for-default-manifest.patch \
    014-gcc-9-branch-clone_function_name_1-Retain-any-stdcall-suffix.patch \
    016-Ensure-lmsvcrt-precede-lkernel32.patch \
    020-libgomp-Don-t-hard-code-MS-printf-attributes.patch \
    023-gcc-8-ALL_ADAFLAGS-filter-out-Wno-pedantic-ms-format.patch

#    005-Windows-Don-t-ignore-native-system-header-dir.patch \
#    010-Fix-using-large-PCH.patch

  apply_patch_with_msg \
    130-libstdc++-in-out.patch

  # Enable diagnostic color under mintty
  # ÐÑÑÐµÑÐ»Ð°Ð² ÐÐµÑÑÐ¸ÑÐµÐ² <vyachemail@gmail.com>
  apply_patch_with_msg \
    140-gcc-8.2.0-diagnostic-color.patch

  apply_patch_with_msg \
    150-gcc-10.2.0-libgcc-ldflags.patch

  # ensure libbacktrace works with SEH
  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96948
  apply_patch_with_msg \
    160-libbacktrace-seh.patch

  # https://gcc.gnu.org/git/?p=gcc.git;a=commit;h=c51f1e7427e6a5ae2a6d82b5a790df77a3adc99a
  apply_patch_with_msg \
    200-ms_printf-improvements.patch

#  # https://github.com/msys2/MINGW-packages/issues/8094
#  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100402
#  apply_patch_with_msg \
#    203-backport-longjmp-fix.patch

  # https://gcc.gnu.org/git/?p=gcc.git;a=commit;h=8ce35e4c066b68d0cbc656b000ece84f7ea7741a
  apply_patch_with_msg \
    204-Change-EH-pointer-encodings-to-PC-relative-on-Window.patch

#  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96238
#  apply_patch_with_msg \
#    205-x86-Add-include-gard-to-cpuid.h.patch

  # do not expect ${prefix}/mingw symlink - this should be superceded by
  # 0005-Windows-Don-t-ignore-native-system-header-dir.patch .. but isn't!
  sed -i 's/${prefix}\/mingw\//${prefix}\//g' configure

  # change hardcoded /mingw prefix to the real prefix .. isn't this rubbish?
  # it might work at build time and could be important there but beyond that?!
  local MINGW_NATIVE_PREFIX=$(cygpath -am ${MINGW_PREFIX}/${MINGW_CHOST})
  sed -i "s#\\/mingw\\/#${MINGW_NATIVE_PREFIX//\//\\/}\\/#g" gcc/config/i386/mingw32.h
}

build() {
  [[ -d ${srcdir}/build-${MINGW_CHOST} ]] && rm -rf ${srcdir}/build-${MINGW_CHOST}
  mkdir -p ${srcdir}/build-${MINGW_CHOST} && cd ${srcdir}/build-${MINGW_CHOST}

  declare -a extra_config
  if check_option "debug" "n"; then
    extra_config+=("--disable-libstdcxx-debug")
  else
    extra_config+=("--enable-libstdcxx-debug")
  fi

  if [ "$_enable_3_stages" == "no" ]; then
    extra_config+=("--disable-bootstrap")
  elif [ "$_enable_3_stages" == "yes" ]; then
    extra_config+=("--enable-bootstrap")
  fi

  if [ "$_enable_threads" == "yes" ]; then
    extra_config+=("--enable-threads=posix")
    extra_config+=("--enable-libatomic")
    extra_config+=("--enable-libgomp")
  else
    extra_config+=("--disable-threads")
    extra_config+=("--disable-libatomic")
    extra_config+=("--disable-libgomp")
  fi

  if [ "$_enable_graphite" == "yes" ]; then
    extra_config+=("--enable-graphite")
    if [ "$_enable_system_isl_lib" == "yes" ]; then
      extra_config+=("--with-isl=${MINGW_PREFIX}")
    fi
  else
    extra_config+=("--disable-graphite")
  fi

  if [ "$_enable_system_mpc_mpfr_gmp_libs" == "yes" ]; then
    extra_config+=(--with-{gmp,mpfr,mpc}=${MINGW_PREFIX})
  fi

  if [ "$_enable_multilib" == "yes" && "$MSYSTEM" == "MINGW64" ]; then
    extra_config+=("--enable-multilib")
  else
    extra_config+=("--disable-multilib")
  fi

  LDFLAGS="-pipe" # Only option safe for both 64 and 32 bit builds

  case "${CARCH}" in
    i686)
      local _arch=i686
    ;;

    x86_64)
      local _arch=x86-64
    ;;
  esac

  local _languages="c,lto,c++"
  if [ "$_enable_ada" == "yes" ]; then
    _languages+=",ada"
  fi
  if [ "$_enable_fortran" == "yes" ]; then
    _languages+=",fortran"
  fi
  if [ "$_enable_objc" == "yes" ]; then
    _languages+=",objc,obj-c++"
  fi

  # so libgomp DLL gets built despide static libdl
  export lt_cv_deplibs_check_method='pass_all'

  local _LDFLAGS_FOR_TARGET="$LDFLAGS"
  LDFLAGS+=" -Wl,--disable-dynamicbase"

  ../${_sourcedir}/configure \
    --prefix=${MINGW_PREFIX} \
    --with-local-prefix=${MINGW_PREFIX}/local \
    --build=${MINGW_CHOST} \
    --host=${MINGW_CHOST} \
    --target=${MINGW_CHOST} \
    --with-native-system-header-dir=${MINGW_PREFIX}/${MINGW_CHOST}/include \
    --libexecdir=${MINGW_PREFIX}/lib \
    --enable-checking=release \
    --with-arch=${_arch} \
    --with-tune=generic \
    --enable-languages=${_languages} \
    --disable-shared --enable-static \
    --enable-fully-dynamic-string \
    --enable-libstdcxx-filesystem-ts=yes \
    --enable-libstdcxx-time=yes \
    --disable-libstdcxx-pch \
    ${extra_config[@]} \
    --enable-lto \
    --disable-rpath \
    --disable-win32-registry \
    --disable-nls \
    --disable-werror \
    --disable-symvers \
    --with-libiconv \
    --with-system-zlib \
    --with-pkgversion="Rev${pkgrel}, Built by MSYS2 project" \
    --with-bugurl="https://github.com/msys2/MINGW-packages/issues" \
    --with-gnu-as --with-gnu-ld \
    --with-boot-ldflags="${LDFLAGS} -static-libstdc++ -static-libgcc" \
    LDFLAGS_FOR_TARGET="${_LDFLAGS_FOR_TARGET}" \
    --enable-linker-plugin-flags='LDFLAGS=-static-libstdc++\ -static-libgcc\ '"${_LDFLAGS_FOR_TARGET// /\\ }"'\ -Wl,--stack,12582912'

  # While we're debugging -fopenmp problems at least.
  # .. we may as well not strip anything.
  if check_option "strip" "n"; then
    sed -i 's,^STRIP = .*$,STRIP = true,g'                   Makefile
    sed -i 's,^STRIP_FOR_TARGET=.*$,STRIP_FOR_TARGET=true,g' Makefile
  fi

  make V=1 all

  rm -rf ${srcdir}${MINGW_PREFIX}

  make -j1 DESTDIR=${srcdir} install
}

package_gcc9-static() {
  pkgdesc="GNU Compiler Collection (C,C++,OpenMP) for MinGW-w64"
  depends=("${MINGW_PACKAGE_PREFIX}-binutils"
           "${MINGW_PACKAGE_PREFIX}-headers"
           "${MINGW_PACKAGE_PREFIX}-libiconv"
           "${MINGW_PACKAGE_PREFIX}-zlib"
           "${MINGW_PACKAGE_PREFIX}-zstd")
  provides=("${MINGW_PACKAGE_PREFIX}-${_realname}-base" "${MINGW_PACKAGE_PREFIX}-${_realname}")
  conflicts=("${MINGW_PACKAGE_PREFIX}-${_realname}-base"
             "${MINGW_PACKAGE_PREFIX}-${_realname}"
             "${MINGW_PACKAGE_PREFIX}-libgccjit")

  if [[ "$_enable_threads" == "yes" ]]; then
    depends+=("${MINGW_PACKAGE_PREFIX}-winpthreads")
  fi

  if [[ "$_enable_multilib" == "yes" ]]; then
    depends+=("${MINGW_PACKAGE_PREFIX}-crt-multilib" "${MINGW_PACKAGE_PREFIX}-windows-default-manifest-multilib")
  else
    depends+=("${MINGW_PACKAGE_PREFIX}-crt" "${MINGW_PACKAGE_PREFIX}-windows-default-manifest")
  fi

  if [[ "$_enable_system_mpc_mpfr_gmp_libs" == "yes" ]]; then
    depends+=("${MINGW_PACKAGE_PREFIX}-gmp" "${MINGW_PACKAGE_PREFIX}-mpc" "${MINGW_PACKAGE_PREFIX}-mpfr")
  fi

  if [[ "$_enable_system_isl_lib" == "yes" && "$_enable_graphite" == "yes" ]]; then
    depends+=("${MINGW_PACKAGE_PREFIX}-isl")
  fi

  mkdir -p ${pkgdir}${MINGW_PREFIX}/{bin,include,lib,share}

  if [[ "$_enable_multilib" == "yes" && "$MSYSTEM" == "MINGW64" ]]; then
    mkdir -p ${pkgdir}${MINGW_PREFIX}/lib32
  fi

  cd ${srcdir}${MINGW_PREFIX}
  cp bin/cpp.exe                                        ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/gcc.exe                                        ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/gcc.exe                                        ${pkgdir}${MINGW_PREFIX}/bin/cc.exe
  cp bin/gcc-ar.exe                                     ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/gcc-nm.exe                                     ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/gcc-ranlib.exe                                 ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/gcov.exe                                       ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/gcov-tool.exe                                  ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/c++.exe                                        ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/g++.exe                                        ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/${MINGW_CHOST}-c++.exe                         ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/${MINGW_CHOST}-g++.exe                         ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/${MINGW_CHOST}-gcc-${pkgver%%+*}.exe               ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/${MINGW_CHOST}-gcc.exe                         ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/${MINGW_CHOST}-gcc-ar.exe                      ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/${MINGW_CHOST}-gcc-nm.exe                      ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/${MINGW_CHOST}-gcc-ranlib.exe                  ${pkgdir}${MINGW_PREFIX}/bin/

  mkdir -p ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include/*.h        ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include/
  cp -r lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include/ssp     ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include/
  cp -r lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include-fixed   ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp -r lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/install-tools   ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/cc1.exe            ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/collect2.exe       ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/crt*.o             ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/liblto*            ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/libgcov*           ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/lto*.exe           ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/cc1plus.exe        ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/

  if [[ "$_enable_threads" == "yes" ]]; then
    cp lib/libatomic*                                        ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  fi
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/libgcc*            ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/

  if [[ "$_enable_threads" == "yes" ]]; then
    cp lib/libgomp*                                          ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  fi
  cp lib/libquadmath*                                    ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/libssp*                                         ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/libstdc++*                                      ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/libsupc++*                                      ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/

  if [[ "$_enable_multilib" == "yes" && "$MSYSTEM" == "MINGW64" ]]; then
    mkdir -p ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/32
    cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/32/libgcc*       ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/32/

    mkdir -p ${pkgdir}${MINGW_PREFIX}/lib32/gcc/${MINGW_CHOST}/${pkgver%%+*}
    if [[ "$_enable_threads" == "yes" ]]; then
      cp lib32/libgomp*                                      ${pkgdir}${MINGW_PREFIX}/lib32/gcc/${MINGW_CHOST}/${pkgver%%+*}/
    fi
    cp lib32/libquadmath*                                    ${pkgdir}${MINGW_PREFIX}/lib32/gcc/${MINGW_CHOST}/${pkgver%%+*}/
    cp lib32/libssp*                                         ${pkgdir}${MINGW_PREFIX}/lib32/gcc/${MINGW_CHOST}/${pkgver%%+*}/
    cp lib32/libstdc++*                                      ${pkgdir}${MINGW_PREFIX}/lib32/gcc/${MINGW_CHOST}/${pkgver%%+*}/
    cp lib32/libsupc++*                                      ${pkgdir}${MINGW_PREFIX}/lib32/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  fi

  cp -r include/c++                                       ${pkgdir}${MINGW_PREFIX}/include/

  mkdir -p ${pkgdir}${MINGW_PREFIX}/share/{doc,info,locale,man}
  cp share/info/cpp.info*                                ${pkgdir}${MINGW_PREFIX}/share/info/
  cp share/info/cppinternals.info*                       ${pkgdir}${MINGW_PREFIX}/share/info/
  cp share/info/gcc.info*                                ${pkgdir}${MINGW_PREFIX}/share/info/
  cp share/info/gccinstall.info*                         ${pkgdir}${MINGW_PREFIX}/share/info/
  cp share/info/gccint.info*                             ${pkgdir}${MINGW_PREFIX}/share/info/
  if [[ "$_enable_threads" == "yes" ]]; then
    cp share/info/libgomp.info*                            ${pkgdir}${MINGW_PREFIX}/share/info/
  fi
  cp share/info/libquadmath.info*                        ${pkgdir}${MINGW_PREFIX}/share/info/

  mkdir -p ${pkgdir}${MINGW_PREFIX}/share/gcc-${pkgver%%+*}/python
  cp -r share/gcc-${pkgver%%+*}/python/libstdcxx             ${pkgdir}${MINGW_PREFIX}/share/gcc-${pkgver%%+*}/python/
  mkdir -p ${pkgdir}${MINGW_PREFIX}/share/man/man1
  cp share/man/man1/cpp.1*                               ${pkgdir}${MINGW_PREFIX}/share/man/man1/
  cp share/man/man1/gcc.1*                               ${pkgdir}${MINGW_PREFIX}/share/man/man1/
  cp share/man/man1/gcov.1*                              ${pkgdir}${MINGW_PREFIX}/share/man/man1/
  cp share/man/man7/fsf-funding.7*                       ${pkgdir}${MINGW_PREFIX}/share/man/man1/
  cp share/man/man7/gfdl.7*                              ${pkgdir}${MINGW_PREFIX}/share/man/man1/
  cp share/man/man7/gpl.7*                               ${pkgdir}${MINGW_PREFIX}/share/man/man1/
  cp share/man/man1/g++.1*                               ${pkgdir}${MINGW_PREFIX}/share/man/man1/

  # install "custom" system gdbinit
  install -D -m644 ${srcdir}/gdbinit ${pkgdir}${MINGW_PREFIX}/etc/gdbinit
  sed -i 's|%GCC_NAME%|gcc-'${pkgver%%+*}'|g' ${pkgdir}${MINGW_PREFIX}/etc/gdbinit
}

package_gcc9-fortran-static() {
  pkgdesc="GNU Compiler Collection (Fortran) for MinGW-w64"
  depends=("${MINGW_PACKAGE_PREFIX}-${_pkgname_prefix}${_pkgname_suffix}=${pkgver}-${pkgrel}")
  provides=("${MINGW_PACKAGE_PREFIX}-${_realname}-fortran")
  conflicts=("${MINGW_PACKAGE_PREFIX}-${_realname}-fortran")

  mkdir -p ${pkgdir}${MINGW_PREFIX}/{bin,lib,share}

  cd ${srcdir}${MINGW_PREFIX}
  cp bin/gfortran.exe ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/${MINGW_CHOST}-gfortran.exe ${pkgdir}${MINGW_PREFIX}/bin/

  mkdir -p ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}
  cp -r lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/finclude       ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/f951.exe          ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/libcaf_single.a   ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/libgfortran*                                   ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  mkdir -p ${pkgdir}${MINGW_PREFIX}/share/man/man1
  cp share/man/man1/gfortran.1*                         ${pkgdir}${MINGW_PREFIX}/share/man/man1/
  mkdir -p ${pkgdir}${MINGW_PREFIX}/share/info
  cp share/info/gfortran.info*                          ${pkgdir}${MINGW_PREFIX}/share/info/

  # We explain the licensing in this generated README file
  mkdir -p "${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}"
  cat << ENDFILE > "${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}/README"
The libgcc, libssp, libstdc++, libgomp and libatomic libraries are covered by
GPL3+ with the GCC Runtime Library Exception. The libquadmath library is covered
by LGPL2+. The package as a whole can be redistributed under GPL3+.
ENDFILE

  # License files
  install -Dm644 "${srcdir}/${_sourcedir}/COPYING3"        "${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}/COPYING3"
  install -Dm644 "${srcdir}/${_sourcedir}/COPYING.LIB"     "${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}/COPYING.LIB"
  install -Dm644 "${srcdir}/${_sourcedir}/COPYING.RUNTIME" "${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}/COPYING.RUNTIME"
}

package_gcc9-ada-static() {
  pkgdesc="GNU Compiler Collection (Ada) for MinGW-w64"
  depends=("${MINGW_PACKAGE_PREFIX}-${_pkgname_prefix}${_pkgname_suffix}=${pkgver}-${pkgrel}")
  provides=("${MINGW_PACKAGE_PREFIX}-${_realname}-ada")
  conflicts=("${MINGW_PACKAGE_PREFIX}-${_realname}-ada")

  mkdir -p ${pkgdir}${MINGW_PREFIX}/{bin,lib,share}

  cd ${srcdir}${MINGW_PREFIX}
  cp bin/gnat*.exe ${pkgdir}${MINGW_PREFIX}/bin/

  mkdir -p ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}
  cp -r lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/adainclude     ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp -r lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/adalib         ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/gnat1.exe         ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/

  if [[ "$_enable_multilib" == "yes" && "$MSYSTEM" == "MINGW64" ]]; then
    mkdir -p ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/32
    cp -r lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/32/adainclude  ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/32/
    cp -r lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/32/adalib      ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/32/
  fi

  mkdir -p ${pkgdir}${MINGW_PREFIX}/share/info
  cp share/info/gnat-style.info*                        ${pkgdir}${MINGW_PREFIX}/share/info/
  cp share/info/gnat_rm.info*                           ${pkgdir}${MINGW_PREFIX}/share/info/
  cp share/info/gnat_ugn.info*                          ${pkgdir}${MINGW_PREFIX}/share/info/
}

package_gcc9-objc-static() {
  pkgdesc="GNU Compiler Collection (ObjC,Obj-C++) for MinGW-w64"
  depends=("${MINGW_PACKAGE_PREFIX}-${_pkgname_prefix}${_pkgname_suffix}=${pkgver}-${pkgrel}")
  provides=("${MINGW_PACKAGE_PREFIX}-${_realname}-objc")
  conflicts=("${MINGW_PACKAGE_PREFIX}-${_realname}-objc")

  mkdir -p ${pkgdir}${MINGW_PREFIX}/{bin,lib}

  cd ${srcdir}${MINGW_PREFIX}

  mkdir -p ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include
  cp -r lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include/objc    ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/cc1obj.exe         ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/cc1objplus.exe     ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/libobjc.*                                       ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
}


# template start; name=mingw-w64-splitpkg-wrappers; version=1.0;
# vim: set ft=bash :

# generate wrappers
for _name in "${pkgname[@]}"; do
  _short="package_${_name#${MINGW_PACKAGE_PREFIX}-}"
  _func="$(declare -f "${_short}")"
  eval "${_func/#${_short}/package_${_name}}"
done
# template end;
